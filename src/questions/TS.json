{
  "testName": "TypeScript",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": [
    "TypeScript"
  ],
  "questions": [
    {
      "id": 1,
      "question": "What is the primary advantage of using TypeScript over JavaScript?",
      "options": [
        "Faster execution in browsers",
        "Strong typing and better tooling",
        "Built-in database support",
        "Automatically optimizes code"
      ],
      "answer": "Strong typing and better tooling"
    },
    {
      "id": 2,
      "question": "What does the `?` symbol denote in a TypeScript interface?",
      "options": [
        "A required property",
        "A private property",
        "A readonly property",
        "An optional property"
      ],
      "answer": "An optional property"
    },
    {
      "id": 3,
      "question": "What is a type assertion in TypeScript?",
      "options": [
        "A way to forcibly assign a type to a value",
        "A way to declare constants",
        "A way to check types at runtime",
        "A way to import types from modules"
      ],
      "answer": "A way to forcibly assign a type to a value"
    },
    {
      "id": 4,
      "question": "What is the difference between `interface` and `type` in TypeScript?",
      "options": [
        "Interfaces can't extend other types",
        "Types are used only for primitives",
        "Interfaces are only for classes",
        "Interfaces can be extended multiple times; types cannot be reopened once defined"
      ],
      "answer": "Interfaces can be extended multiple times; types cannot be reopened once defined"
    },
    {
      "id": 5,
      "question": "What is the purpose of the `never` type?",
      "options": [
        "A function returns a value of unknown type",
        "A value that can be anything",
        "A value that never occurs or a function that never returns",
        "A type that is always falsy"
      ],
      "answer": "A value that never occurs or a function that never returns"
    },
    {
      "id": 6,
      "question": "Which of the following is not assignable to a variable of type `unknown`?",
      "options": [
        "number",
        "string[]",
        "boolean",
        "Direct method calls on it without type assertion"
      ],
      "answer": "Direct method calls on it without type assertion"
    },
    {
      "id": 7,
      "question": "How does TypeScript handle structural typing (duck typing)?",
      "options": [
        "By comparing variable names",
        "By matching only function signatures",
        "By ensuring types are nominally declared",
        "By checking compatibility based on shape"
      ],
      "answer": "By checking compatibility based on shape"
    },
    {
      "id": 8,
      "question": "What does the `keyof` operator return?",
      "options": [
        "All values of an object",
        "An array of values",
        "A union of property names as string literals",
        "A type alias for object methods only"
      ],
      "answer": "A union of property names as string literals"
    },
    {
      "id": 9,
      "question": "How is `unknown` different from `any`?",
      "options": [
        "`unknown` can only be used in return types",
        "`any` is more restrictive than `unknown`",
        "`unknown` forces type checks before usage",
        "Both behave exactly the same"
      ],
      "answer": "`unknown` forces type checks before usage"
    },
    {
  "id": 10,
  "question": "You want to make all properties of 'User' optional in TypeScript. What utility type should you use?",
  "options": [
    "Record&lt;User&gt;",
    "Partial&lt;User&gt;",
    "Pick&lt;User&gt;",
    "Readonly&lt;User&gt;"
  ],
  "answer": "Partial&lt;User&gt;"
},
    {
      "id": 11,
      "question": "What is the output of: \n\ntype Fruit = \"apple\" | \"banana\"; \nconst pickFruit = (f: Fruit) => console.log(f); \npickFruit(\"grape\");\n",
      "options": [
        "Logs \"grape\"",
        "Runtime error",
        "Compile-time error",
        "No output"
      ],
      "answer": "Compile-time error"
    },
    {
  "id": 12,
  "question": "What is the output of:\n\ninterface A { x: number; }\ninterface B extends A { y: string; }\nconst obj: B = { x: 1, y: \\\"hello\\\" };\nconsole.log(obj.x + obj.y);\n",
  "options": [
    "1hello",
    "NaN",
    "Compile-time error",
    "undefined"
  ],
  "answer": "1hello"
},
    {
      "id": 13,
      "question": "What happens here: let x: never = \"hello\";",
      "options": [
        "Compiles and assigns successfully",
        "Throws runtime error",
        "Compile-time error",
        "x will be undefined"
      ],
      "answer": "Compile-time error"
    },
    {
      "id": 14,
      "question": "What is the output of: \n\nfunction greet(name: string | null): \nstring { return name?.toUpperCase() ?? \"Anonymous\"; } \nconsole.log(greet(null));\n",
      "options": [
        "\"NULL\"",
        "\"ANONYMOUS\"",
        "\"Anonymous\"",
        "Error at runtime"
      ],
      "answer": "\"Anonymous\""
    },
    {
      "id": 15,
      "question": "How do you enforce immutability for an object?",
      "options": [
        "Use const",
        "Use readonly properties",
        "Use Object.freeze()",
        "Both B and C"
      ],
      "answer": "Both B and C"
    },
    {
      "id": 16,
      "question": "What is the output of: \n\nconst tuple: [string, number] = [\"hello\", 42]; \ntuple.push(100); \nconsole.log(tuple.length);\n",
      "options": [
        "2",
        "3",
        "Compile-time error",
        "Runtime error"
      ],
      "answer": "3"
    },
    {
      "id": 17,
      "question": "What does `as const` do?",
      "options": [
        "Makes an object mutable",
        "Infers the narrowest possible literal types",
        "Converts values to strings",
        "Disables type checking"
      ],
      "answer": "Infers the narrowest possible literal types"
    },
    {
      "id": 18,
      "question": "What is the output of: \n\ntype T = { a: number } | { b: string }; \nconst x: T = { a: 1, b: \"test\" }; \nconsole.log(x.a);\n",
      "options": [
        "1",
        "undefined",
        "Compile-time error",
        "Runtime error"
      ],
      "answer": "1"
    },
{
  "id": 19,
  "question": "How do you extract the return type of a function?",
  "options": [
    "ReturnType&lt;typeof fn&gt;",
    "fn.returnType",
    "typeof fn.return",
    "infer Return"
  ],
  "answer": "ReturnType&lt;typeof fn&gt;"
}
,
    {
      "id": 20,
      "question": "What is the output of: \n\ndeclare function foo(): { a: number; b: string }; \ntype X = ReturnType&lt;typeof foo&gt;;\n const x: X = { a: 1, b: \"hi\" }; \nconsole.log(x.b);\n",
      "options": [
        "\"hi\"",
        "undefined",
        "Compile-time error",
        "Runtime error"
      ],
      "answer": "\"hi\""
    },
    {
  "id": 21,
  "question": "How do you declare a generic function that returns the first element of any array?",
  "options": [
    "function first&lt;T&gt;(arr: T[]): T { return arr[0]; }",
    "function first(arr: any[]): any { return arr[0]; }",
    "function first&lt;T&gt;(arr: Array&lt;T&gt;): T { return arr[0]; }",
    "Both A and C are valid"
  ],
  "answer": "function first&lt;T&gt;(arr: T[]): T { return arr[0]; }"
}
,
    {
      "id": 22,
      "question": "What is the output of: \n\ntype A = { a: number }; \ntype B = { b: string }; \ntype C = A & B; \nconst c: C = { a: 1, b: \"x\" }; \nconsole.log(c.a + c.b);\n",
      "options": [
        "1x",
        "Compile-time error",
        "NaN",
        "Runtime error"
      ],
      "answer": "1x"
    },
    {
      "id": 23,
      "question": "How do you make a property conditionally optional?",
      "options": [
        "Use ?",
        "Use a mapped type with Partial",
        "Use a ternary in the type",
        "TypeScript doesn't support this"
      ],
      "answer": "Use a ternary in the type"
    },
    {
      "id": 24,
      "question": "What is the output of: \n\nconst arr: readonly number[] = [1, 2, 3]; arr[0] = 4; \nconsole.log(arr[0]);\n",
      "options": [
        "4",
        "1",
        "Compile-time error",
        "Runtime error"
      ],
      "answer": "Compile-time error"
    },
      {
    "id": 25,
    "question": "Which is the correct way to type React component props using an interface?",
    "options": [
      "interface Props { name: string; }",
      "type Props = { name: string; }",
      "Props = { name: string; }",
      "props: any"
    ],
    "answer": "interface Props { name: string; }"
  },
    {
  "id": 26,
  "question": "What is the output of:\n\nfunction f(x: string | number): number {\n  if (typeof x === \\\"string\\\") return x.length;\n  return x * 2;\n}\nconsole.log(f(\"hello\"));\n",
  "options": [
    "5",
    "10",
    "\"hello\".length",
    "Compile-time error"
  ],
  "answer": "5"
},
    {
  "id": 27,
  "question": "What is the correct way to define an object with dynamic string keys and number values?",
  "options": [
    "Record&lt;string, number&gt;",
    "{ [key: string]: number }",
    "Map&lt;string, number&gt;",
    "object&lt;string, number&gt;"
  ],
  "answer": "Record&lt;string, number&gt;"
},
    {
      "id": 28,
      "question": "What is the output of: \n\ntype T = Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">; \nconst x: T = \"c\"; \nconsole.log(x);\n",
      "options": [
        "\"a\"",
        "\"b\"",
        "\"c\"",
        "Compile-time error"
      ],
      "answer": "\"c\""
    },
    {
      "id": 29,
      "question": "How do you type a function with a variable number of arguments?",
      "options": [
        "Use ...args: any[]",
        "Use a tuple type",
        "Use rest parameters with typed arrays",
        "TypeScript doesn't support this"
      ],
      "answer": "Use rest parameters with typed arrays"
    },
    {
  "id": 30,
  "question": "What is the output of:\n\ntype T = { a: number } | { b: string };\nfunction f(x: T) {\n  if (\"a\" in x)\n    console.log(x.a);\n  else\n    console.log(x.b);\n}\nf({ a: 1 });\n",
  "options": [
    "1",
    "undefined",
    "Compile-time error",
    "Runtime error"
  ],
  "answer": "1"
}
  ]
}