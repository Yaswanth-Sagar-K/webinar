{
  "testName": "Flask",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": [
    "Flask"
  ],
  "questions": [
    {
      "id": 1,
      "question": "Which of the following is a micro web framework in Python?",
      "options": [
        "Flask",
        "Django",
        "FastAPI",
        "Pyramid"
      ],
      "answer": "Flask",
      "difficulty": "easy"
    },
    {
      "id": 2,
      "question": "What is the default file name Flask looks for to start an app?",
      "options": [
        "app.py",
        "flask.py",
        "main.py",
        "index.py"
      ],
      "answer": "app.py",
      "difficulty": "easy"
    },
    {
      "id": 3,
      "question": "Which method is used to redirect in Flask?",
      "options": [
        "redirect()",
        "go_to()",
        "navigate()",
        "forward()"
      ],
      "answer": "redirect()",
      "difficulty": "easy"
    },
    {
      "id": 4,
      "question": "What is the correct import to get form data in Flask?",
      "options": [
        "from flask import request",
        "import flask.request",
        "from flask.form import request",
        "import flaskform"
      ],
      "answer": "from flask import request",
      "difficulty": "easy"
    },
    {
      "id": 5,
      "question": "Where are static files placed in a Flask project by default?",
      "options": [
        "static/",
        "templates/",
        "assets/",
        "public/"
      ],
      "answer": "static/",
      "difficulty": "easy"
    },
    {
      "id": 6,
      "question": "Which HTTP method is used when a form is submitted without a method attribute?",
      "options": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
      ],
      "answer": "GET",
      "difficulty": "easy"
    },
    {
      "id": 7,
      "question": "What is the output of `request.method` in a POST route?",
      "options": [
        "POST",
        "GET",
        "200",
        "None"
      ],
      "answer": "POST",
      "difficulty": "moderate"
    },
    {
      "id": 8,
      "question": "Which of these is true about `render_template`?",
      "options": [
        "It returns an HTML response using a Jinja2 template.",
        "It compiles templates to Python code.",
        "It converts Python data to JSON.",
        "It is used to log errors."
      ],
      "answer": "It returns an HTML response using a Jinja2 template.",
      "difficulty": "moderate"
    },
    {
      "id": 9,
      "question": "How can you access query parameters in Flask?",
      "options": [
        "request.args",
        "request.data",
        "request.form",
        "request.json"
      ],
      "answer": "request.args",
      "difficulty": "moderate"
    },
    {
      "id": 10,
      "question": "Which Flask component helps break the app into modular parts?",
      "options": [
        "Blueprints",
        "Sessions",
        "Templates",
        "Views"
      ],
      "answer": "Blueprints",
      "difficulty": "moderate"
    },
    {
      "id": 11,
      "question": "Which extension helps integrate SQLAlchemy with Flask?",
      "options": [
        "Flask-SQLAlchemy",
        "Flask-DB",
        "Flask-ORM",
        "Flask-Models"
      ],
      "answer": "Flask-SQLAlchemy",
      "difficulty": "moderate"
    },
    {
      "id": 12,
      "question": "What does `app.debug = True` enable?",
      "options": [
        "Auto-reload and better error messages",
        "Production optimization",
        "Database access",
        "Static file serving"
      ],
      "answer": "Auto-reload and better error messages",
      "difficulty": "moderate"
    },
    {
      "id": 13,
      "question": "What happens if no route matches the request in Flask?",
      "options": [
        "404 error",
        "500 error",
        "Empty response",
        "Redirect"
      ],
      "answer": "404 error",
      "difficulty": "moderate"
    },
    {
      "id": 14,
      "question": "What is `flask.g` used for?",
      "options": [
        "Store data during a request lifecycle",
        "Global config for the app",
        "Send files",
        "Manage sessions"
      ],
      "answer": "Store data during a request lifecycle",
      "difficulty": "moderate"
    },
    {
      "id": 15,
      "question": "Which is the correct syntax to define a POST route in Flask?",
      "options": [
        "@app.route('/submit', methods=['POST'])",
        "@app.post('/submit')",
        "@route('/submit', post=True)",
        "@app.route.post('/submit')"
      ],
      "answer": "@app.route('/submit', methods=['POST'])",
      "difficulty": "moderate"
    },
    {
      "id": 16,
      "question": "What is the default host used by Flask's development server?",
      "options": [
        "127.0.0.1",
        "localhost",
        "0.0.0.0",
        "::1"
      ],
      "answer": "127.0.0.1",
      "difficulty": "moderate"
    },
    {
      "id": 17,
      "question": "Which file typically holds environment variables for Flask?",
      "options": [
        ".env",
        "config.py",
        "environment.json",
        "settings.py"
      ],
      "answer": ".env",
      "difficulty": "moderate"
    },
    {
      "id": 18,
      "question": "Which command activates the virtual environment?",
      "options": [
        "source venv/bin/activate",
        "activate venv",
        "start flask",
        "python3 flask activate"
      ],
      "answer": "source venv/bin/activate",
      "difficulty": "moderate"
    },
    {
      "id": 19,
      "question": "What does `request.get_json()` return?",
      "options": [
        "A dictionary of parsed JSON data",
        "Raw string data",
        "Form data",
        "HTML content"
      ],
      "answer": "A dictionary of parsed JSON data",
      "difficulty": "hard"
    },
    {
      "id": 20,
      "question": "How can you enforce HTTPS in Flask?",
      "options": [
        "Use Flask-Talisman or SSL context in app.run()",
        "Set `app.config['SECURE'] = True`",
        "Redirect all HTTP routes manually",
        "Use Flask-Middleware"
      ],
      "answer": "Use Flask-Talisman or SSL context in app.run()",
      "difficulty": "hard"
    },
    {
      "id": 21,
      "question": "Which Flask object holds context for the active request?",
      "options": [
        "request",
        "g",
        "current_app",
        "session"
      ],
      "answer": "request",
      "difficulty": "hard"
    },
    {
      "id": 22,
      "question": "What does this Flask route return?\n\n```python\n@app.route('/')\ndef index():\n    return {'msg': 'Hi'}\n```",
      "options": [
        "JSON response with {'msg': 'Hi'}",
        "HTML response",
        "Error: dict not serializable",
        "Empty response"
      ],
      "answer": "JSON response with {'msg': 'Hi'}",
      "difficulty": "hard"
    },
    {
      "id": 23,
      "question": "What is the use of `@app.teardown_appcontext`?",
      "options": [
        "Cleanup resources after each request",
        "Close routes on shutdown",
        "Reload templates",
        "Handle 500 errors"
      ],
      "answer": "Cleanup resources after each request",
      "difficulty": "hard"
    },
    {
      "id": 24,
      "question": "Which extension is used for handling user login in Flask?",
      "options": [
        "Flask-Login",
        "Flask-Auth",
        "Flask-Sessions",
        "Flask-User"
      ],
      "answer": "Flask-Login",
      "difficulty": "hard"
    },
    {
      "id": 25,
      "question": "What does the `app.test_client()` provide?",
      "options": [
        "A test environment for simulating requests",
        "A browser for testing Flask UI",
        "A debugger interface",
        "Profiling support"
      ],
      "answer": "A test environment for simulating requests",
      "difficulty": "hard"
    },
    {
      "id": 26,
      "question": "How are Jinja2 template variables indicated?",
      "options": [
        "{{ variable }}",
        "[[ variable ]]",
        "(% variable %)",
        "<% variable %>"
      ],
      "answer": "{{ variable }}",
      "difficulty": "hard"
    },
    {
      "id": 27,
      "question": "Which object persists across requests?",
      "options": [
        "session",
        "g",
        "request",
        "current_app"
      ],
      "answer": "session",
      "difficulty": "hard"
    },
    {
      "id": 28,
      "question": "What is the default behavior when Flask raises a 500 error?",
      "options": [
        "Shows a debug traceback (if debug=True)",
        "Redirects to index page",
        "Returns a blank page",
        "Sends a 404 response"
      ],
      "answer": "Shows a debug traceback (if debug=True)",
      "difficulty": "hard"
    },
    {
      "id": 29,
      "question": "In which order are request hooks executed?",
      "options": [
        "before_request → view → after_request → teardown_request",
        "before_request → after_request → view",
        "view → before_request → teardown_request",
        "teardown_request → view → after_request"
      ],
      "answer": "before_request → view → after_request → teardown_request",
      "difficulty": "hard"
    },
    {
      "id": 30,
      "question": "What is the behavior of Flask when `app.run(debug=True)` is used?",
      "options": [
        "Code auto-reloads and exceptions show debugger UI",
        "Production mode is enabled",
        "CORS is automatically enabled",
        "Session is disabled"
      ],
      "answer": "Code auto-reloads and exceptions show debugger UI",
      "difficulty": "hard"
    }
  ]
}