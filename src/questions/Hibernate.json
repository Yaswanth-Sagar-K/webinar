{
  "testName": "Hibernate",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": [
    "Hibernate"
  ],
  "questions": [
    {
      "id": 1,
      "question": "What does Hibernate primarily help you do?",
      "options": [
        "Map Java objects to database tables",
        "Style HTML pages",
        "Send network requests",
        "Compile Java bytecode"
      ],
      "answer": "Map Java objects to database tables",
      "difficulty": "easy"
    },
    {
      "id": 2,
      "question": "Which file typically holds Hibernate configuration?",
      "options": [
        "hibernate.cfg.xml",
        "web.xml",
        "application.yml",
        "pom.xml"
      ],
      "answer": "hibernate.cfg.xml",
      "difficulty": "easy"
    },
    {
      "id": 3,
      "question": "Which interface opens database sessions in Hibernate?",
      "options": [
        "SessionFactory",
        "EntityManager",
        "Session",
        "Connection"
      ],
      "answer":"SessionFactory",
      "difficulty": "easy"
    },
    {
      "id": 4,
      "question": "What annotation is used to mark a class as a Hibernate entity?",
      "options": [
        "@Entity",
        "@Table",
        "@HibernateEntity",
        "@MappedEntity"
      ],
      "answer": "@Entity",
      "difficulty": "easy"
    },
    {
      "id": 5,
      "question": "Which annotation maps a primary key field?",
      "options": [
        "@Id",
        "@Key",
        "@PrimaryKey",
        "@Column"
      ],
      "answer": "@Id",
      "difficulty": "easy"
    },
    {
      "id": 6,
      "question": "What does the `@Column` annotation define?",
      "options": [
        "Mapping between a field and a database column",
        "A foreign key relationship",
        "Primary key generation strategy",
        "Query caching behavior"
      ],
      "answer": "Mapping between a field and a database column",
      "difficulty": "easy"
    },
    {
      "id": 7,
      "question": "What is lazy loading in Hibernate?",
      "options": [
        "Deferring the loading of related entities until accessed",
        "Loading all relationships at once",
        "A caching strategy",
        "A transaction mode"
      ],
      "answer": "Deferring the loading of related entities until accessed",
      "difficulty": "moderate"
    },
    {
      "id": 8,
      "question": "What annotation enables caching of entities in second-level cache?",
      "options": [
        "@Cache",
        "@EnableCache",
        "@CacheEntity",
        "@SecondLevelCache"
      ],
      "answer": "@Cache",
      "difficulty": "moderate"
    },
    {
      "id": 9,
      "question": "What is the default fetch type for `@ManyToOne`?",
      "options": [
        "EAGER",
        "LAZY",
        "SUBSELECT",
        "JOIN"
      ],
      "answer": "EAGER",
      "difficulty": "moderate"
    },
    {
      "id": 10,
      "question": "What does `@JoinColumn` specify?",
      "options": [
        "Foreign key column on owning side",
        "Primary key auto-generation",
        "SQL join strategy",
        "Lazy loading behavior"
      ],
      "answer": "Foreign key column on owning side",
      "difficulty": "moderate"
    },
    {
      "id": 11,
      "question": "What is the N+1 select problem?",
      "options": [
        "Excessive queries fetching collections one by one",
        "Invalid SQL generated",
        "Cache eviction issue",
        "Duplicate primary keys"
      ],
      "answer": "Excessive queries fetching collections one by one",
      "difficulty": "moderate"
    },
    {
      "id": 12,
      "question": "How can you solve the N+1 problem in Hibernate?",
      "options": [
        "Using JOIN FETCH in HQL",
        "Disabling lazy loading",
        "Turning off caches",
        "Using native SQL only"
      ],
      "answer": "Using JOIN FETCH in HQL",
      "difficulty": "moderate"
    },
    {
      "id": 13,
      "question": "What is the function of `@Version` annotation?",
      "options": [
        "Enable optimistic locking",
        "Map composite primary key",
        "Customize SQL statements",
        "Indicate schema update"
      ],
      "answer": "Enable optimistic locking",
      "difficulty": "moderate"
    },
    {
      "id": 14,
      "question": "What does `Session.merge()` do?",
      "options": [
        "Updates or inserts detached entity state",
        "Loads entity lazily",
        "Clears session cache",
        "Begins a new transaction"
      ],
      "answer": "Updates or inserts detached entity state",
      "difficulty": "moderate"
    },
    {
      "id": 15,
      "question": "What is the purpose of `Session.flush()`?",
      "options": [
        "Synchronize in-memory changes to DB",
        "End the session",
        "Clear the cache",
        "Commit the transaction"
      ],
      "answer": "Synchronize in-memory changes to DB",
      "difficulty": "moderate"
    },
    {
      "id": 16,
      "question": "Which annotation maps a many-to-many relationship?",
      "options": [
        "@ManyToMany",
        "@OneToMany",
        "@ManyToOne",
        "@OneToOne"
      ],
      "answer": "@ManyToMany",
      "difficulty": "moderate"
    },
    {
      "id": 17,
      "question": "What does `hibernate.hbm2ddl.auto = validate` do?",
      "options": [
        "Validate schema against mappings",
        "Update schema automatically",
        "Drop and recreate schema",
        "Do nothing"
      ],
      "answer": "Validate schema against mappings",
      "difficulty": "moderate"
    },
    {
      "id": 18,
      "question": "Which API allows you to build criteria queries in Hibernate?",
      "options": [
        "CriteriaBuilder",
        "HQL",
        "Native SQL",
        "JPQL"
      ],
      "answer": "CriteriaBuilder",
      "difficulty": "moderate"
    },
    {
      "id": 19,
      "question": "What is the role of `SessionFactory`?",
      "options": [
        "Creates thread-safe Session instances",
        "Handles SQL query cache",
        "Generates primary keys",
        "Validates entities"
      ],
      "answer": "Creates thread-safe Session instances",
      "difficulty": "hard"
    },
    {
      "id": 20,
      "question": "How does `@DynamicUpdate` improve efficiency?",
      "options": [
        "Updates only changed fields",
        "Disables updates",
        "Forces full-row updates",
        "Enables batch SQL updates"
      ],
      "answer": "Updates only changed fields",
      "difficulty": "hard"
    },
    {
      "id": 21,
      "question": "What is the impact of enabling second-level cache?",
      "options": [
        "Shares cached data across sessions",
        "Disables first-level cache",
        "Caches only queries",
        "Requires external caching only"
      ],
      "answer": "Shares cached data across sessions",
      "difficulty": "hard"
    },
    {
      "id": 22,
      "question": "Which annotation sets fetch mode to JOIN at runtime?",
      "options": [
        "@Fetch(FetchMode.JOIN)",
        "@FetchJoin",
        "@FetchType(JOIN)",
        "@JoinFetch"
      ],
      "answer": "@Fetch(FetchMode.JOIN)",
      "difficulty": "hard"
    },
    {
      "id": 23,
      "question": "What does `@NaturalId` allow you to do?",
      "options": [
        "Lookup entities by natural key",
        "Define composite PK",
        "Enable caching automatically",
        "Map subclass entities"
      ],
      "answer": "Lookup entities by natural key",
      "difficulty": "hard"
    },
    {
      "id": 24,
      "question": "When `hibernate.show_sql=true`, what's printed?",
      "options": [
        "SQL statements executed",
        "Errors only",
        "Entity mappings",
        "State transitions"
      ],
      "answer": "SQL statements executed",
      "difficulty": "hard"
    },
    {
      "id": 25,
      "question": "What does `@Immutable` indicate?",
      "options": [
        "Entity is read‑only after persist",
        "Row-level locking enabled",
        "Triggers delete prevention",
        "No caching allowed"
      ],
      "answer": "Entity is read‑only after persist",
      "difficulty": "hard"
    },
    {
      "id": 26,
      "question": "How does `@Fetch(FetchMode.SUBSELECT)` optimize?",
      "options": [
        "Groups SELECTs into a subquery",
        "Eager fetch strategy override",
        "Batch updates automatic",
        "Reduces SQL parsing"
      ],
      "answer": "Groups SELECTs into a subquery",
      "difficulty": "hard"
    },
    {
      "id": 27,
      "question": "Which method evicts all entities from session cache?",
      "options": [
        "clear()",
        "flush()",
        "close()",
        "disconnect()"
      ],
      "answer": "clear()",
      "difficulty": "hard"
    },
    {
      "id": 28,
      "question": "What is the effect of `@Cache(usage = READ_WRITE)`?",
      "options": [
        "Enables synchronized cache with data updates",
        "Cache entries immutable",
        "Write-through only",
        "Not cached across sessions"
      ],
      "answer": "Enables synchronized cache with data updates",
      "difficulty": "hard"
    },
    {
      "id": 29,
      "question": "What does `Interceptor.onSave()` allow you to do?",
      "options": [
        "Customize entity state before DB insert",
        "Intercept SQL queries",
        "Control transaction commit timing",
        "Change schema generation"
      ],
      "answer": "Customize entity state before DB insert",
      "difficulty": "hard"
    },
    {
      "id": 30,
      "question": "How can `@Proxy(lazy=false)` affect loading?",
      "options": [
        "Loads entity eagerly",
        "Disables subselect fetching",
        "Enables dynamic proxies",
        "Changes entity inheritance strategy"
      ],
      "answer": "Loads entity eagerly",
      "difficulty": "hard"
    }
  ]
}