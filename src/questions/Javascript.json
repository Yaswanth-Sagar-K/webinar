{
  "testName": "JavaScript",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": ["JavaScript"],
  "questions": [
    {
      "id": 1,
      "question": "What is the result of `typeof NaN`?",
      "options": ["\"number\"", "\"NaN\"", "\"undefined\"", "\"object\""],
      "answer": "\"number\""
    },
    {
      "id": 2,
      "question": "Which is NOT a valid JavaScript data type?",
      "options": ["undefined", "float", "symbol", "bigint"],
      "answer": "float"
    },
    {
      "id": 3,
      "question": "How do you convert a JSON string into an object?",
      "options": ["JSON.stringify()", "JSON.decode()", "JSON.parse()", "JSON.toObject()"],
      "answer": "JSON.parse()"
    },
    {
      "id": 4,
      "question": "What is the preferred way to check if a variable is an array?",
      "options": ["typeof arr === 'array'", "arr instanceof Array", "Array.isArray(arr)", "Both 2 & 3"],
      "answer": "Both 2 & 3"
    },
    {
      "id": 5,
      "question": "Which operator spreads an array or object?",
      "options": ["...", "*", "&", "#"],
      "answer": "..."
    },
    {
      "id": 6,
      "question": "How do you prevent adding new properties to an object?",
      "options": ["Object.freeze()", "Object.preventExtensions()", "Object.seal()", "All of the above"],
      "answer": "All of the above"
    },
    {
      "id": 7,
      "question": "Which statement about arrow functions is true?",
      "options": [
        "They have their own `this`",
        "They inherit `this` from surrounding scope",
        "They can be used as constructors",
        "They bind `arguments` automatically"
      ],
      "answer": "They inherit `this` from surrounding scope"
    },
    {
      "id": 8,
      "question": "What is the effect of `'use strict'` at the top of a JS file?",
      "options": [
        "Disables ES6 features",
        "Enables stricter parsing and errors",
        "Defines all variables automatically",
        "Improves performance"
      ],
      "answer": "Enables stricter parsing and errors"
    },
    {
      "id": 9,
      "question": "What is the output?\n\n``` function foo() {\n  return\n  {\n    message: \"Hello\"\n  };\n}\nconsole.log(typeof foo());\n```",
      "options": ["object", "undefined", "string", "number"],
      "answer": "undefined"
    },
    {
      "id": 10,
      "question": "What will this print?\n\n``` function count(n) {\n  if (n <= 0) return;\n  console.log(n);\n  count(n - 2);\n}\ncount(5);\n```",
      "options": ["5 4 3 2 1", "5 3 1", "5 2 0", "5 3"],
      "answer": "5 3 1"
    },
    {
      "id": 11,
      "question": "What gets logged?\n\n``` let count = 0;\n(function recur() {\n  if (count >= 3) return;\n  console.log(count++);\n  recur();\n})();\n```",
      "options": ["0 1 2", "0 1 2 3", "1 2 3", "3 2 1"],
      "answer": "0 1 2"
    },
    {
      "id": 12,
      "question": "What is printed?\n\n``` const x = {};\nconst y = { key: 'value' };\nx[y] = 123;\nconsole.log(x[y]);\n```",
      "options": ["undefined", "123", "\"value\"", "Error"],
      "answer": "123"
    },
    {
      "id": 13,
      "question": "What will this log?\n\n``` const a = [1, 2];\nconst b = [1, 2];\nconsole.log(a == b);\n```",
      "options": ["true", "false", "undefined", "Error"],
      "answer": "false"
    },
    {
      "id": 14,
      "question": "What is the output?\n\n``` (function(a) {\n  return (function() {\n    console.log(a);\n    a = 23;\n  })();\n})(42);\n```",
      "options": ["23", "undefined", "42", "Error"],
      "answer": "42"
    },
    {
      "id": 15,
      "question": "What gets printed?\n\n``` let str = 'hello';\nstr[0] = 'H';\nconsole.log(str);\n```",
      "options": ["Hello", "hello", "H", "Error"],
      "answer": "hello"
    },
    {
      "id": 16,
      "question": "What is the console output?\n\n``` const obj = {\n  a: 1,\n  get b() { return this.a + 1; },\n  set c(val) { this.a = val / 2; }\n};\nobj.c = 8;\nconsole.log(obj.b);\n```",
      "options": ["4", "5", "6", "8"],
      "answer": "5"
    },
    {
      "id": 17,
      "question": "How do you get the first array element that meets a condition?",
      "options": ["find()", "filter()", "some()", "every()"],
      "answer": "find()"
    },
    {
      "id": 18,
      "question": "What will `console.log([... [1,2,3], ...[4,5]])` print?",
      "options": ["[1,2,3,4,5]", "[[1,2,3],[4,5]]", "[1,2,3,[4,5]]", "[1,2,3,5,4]"],
      "answer": "[1,2,3,4,5]"
    },
    {
      "id": 19,
      "question": "Which keyword allows using `await` inside a function?",
      "options": ["async", "defer", "await", "promise"],
      "answer": "async"
    },
    {
      "id": 20,
      "question": "In a Map, what happens when you set a key then nullify the original variable?",
      "options": ["Key removed", "Map empty", "Still present", "Throws error"],
      "answer": "Still present"
    },
    {
      "id": 21,
      "question": "What does `console.log(typeof typeof 1)` output?",
      "options": ["number", "string", "object", "undefined"],
      "answer": "string"
    },
    {
      "id": 22,
      "question": "What does `Object.freeze(obj)` do?",
      "options": [
        "Prevents adding/deleting props but allows change",
        "Prevents ANY change to structure or values",
        "Only makes props read-only",
        "Clones object immutable"
      ],
      "answer": "Prevents ANY change to structure or values"
    },
    {
      "id": 23,
      "question": "Which ES6 feature allows string interpolation?",
      "options": ["Arrow functions", "Destructuring", "Template literals", "Spread operator"],
      "answer": "Template literals"
    },
    {
      "id": 24,
      "question": "What tool do you use to debounce a function?",
      "options": ["setTimeout + clearTimeout", "setInterval", ".bind()", "Promise"],
      "answer": "setTimeout + clearTimeout"
    },
    {
      "id": 25,
      "question": "Which will list non-enumerable object props too?",
      "options": ["Object.keys()", "Object.values()", "Object.getOwnPropertyNames()", "for...in"],
      "answer": "Object.getOwnPropertyNames()"
    },
    {
      "id": 26,
      "question": "Why avoid `==` in auth checks?",
      "options": [
        "It throws error for type mismatch",
        "It coerces and can give false positives",
        "It only compares object references",
        "It's slower than ==="
      ],
      "answer": "It coerces and can give false positives"
    },
    {
      "id": 27,
      "question": "What does Array.prototype.sort() do without a compare callback?",
      "options": [
        "Sorts descending",
        "Converts to strings and sorts lexicographically",
        "Leaves array unchanged",
        "Throws error"
      ],
      "answer": "Converts to strings and sorts lexicographically"
    },
    {
      "id": 28,
      "question": "How do you deeply clone an object including nested objects?",
      "options": [
        "JSON.parse(JSON.stringify(obj))",
        "Object.assign()",
        "Recursive clone function",
        "Object.create(obj)"
      ],
      "answer": "Recursive clone function"
    },
    {
      "id": 29,
      "question": "Which iterable iterator object gets returned by a generator?",
      "options": ["function", "promise", "iterator", "closure"],
      "answer": "iterator"
    },
    {
      "id": 30,
      "question": "What gets printed by this IIFE reduce?\n\n``` const result = (() => {\n  const val = [10, 20, 30].reduce((a, b) => a + b, 0);\n  return val / 3;\n})();\nconsole.log(result);\n```",
      "options": ["20", "10", "30", "60"],
      "answer": "20"
    }
  ]
}
