{
  "testName": "Spring",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": ["Spring Framework"],
  "questions": [
    {
      "id": 1,
      "question": "Which interface is used to manage the complete lifecycle of Spring beans?",
      "options": [
        "BeanFactory",
        "ApplicationContext",
        "BeanPostProcessor",
        "InitializingBean"
      ],
      "answer": "InitializingBean",
      "difficulty": "hard"
    },
    {
      "id": 2,
      "question": "What happens when you annotate a method with @Bean inside a @Configuration class?",
      "options": [
        "It creates and registers a bean in the Spring container.",
        "It disables the method from being a bean.",
        "It creates a new application context.",
        "It enables component scanning."
      ],
      "answer": "It creates and registers a bean in the Spring container.",
      "difficulty": "moderate"
    },
    {
      "id": 3,
      "question": "Which of the following is true about Spring's IoC (Inversion of Control) container?",
      "options": [
        "It manages object creation and their dependencies.",
        "It only supports constructor injection.",
        "It cannot manage singleton beans.",
        "It requires manual dependency injection."
      ],
      "answer": "It manages object creation and their dependencies.",
      "difficulty": "moderate"
    },
    {
      "id": 4,
      "question": "Which file is commonly used to configure beans in a traditional Spring application?",
      "options": [
        "applicationContext.xml",
        "spring.xml",
        "beans.xml",
        "web.xml"
      ],
      "answer": "applicationContext.xml",
      "difficulty": "moderate"
    },
    {
      "id": 5,
      "question": "What is the scope of a Spring bean by default?",
      "options": [
        "singleton",
        "prototype",
        "request",
        "session"
      ],
      "answer": "singleton",
      "difficulty": "easy"
    },
    {
      "id": 6,
      "question": "Which of these annotations is used to define a Controller in Spring MVC?",
      "options": [
        "@Controller",
        "@Service",
        "@Component",
        "@Repository"
      ],
      "answer": "@Controller",
      "difficulty": "easy"
    },
    {
      "id": 7,
      "question": "What does the `@PropertySource` annotation do?",
      "options": [
        "It loads property files into Spring's Environment.",
        "It binds a property to a method.",
        "It creates a bean from a property file.",
        "It sets up database properties."
      ],
      "answer": "It loads property files into Spring's Environment.",
      "difficulty": "moderate"
    },
    {
      "id": 8,
      "question": "Which annotation allows automatic detection of classes for Spring's component scanning?",
      "options": [
        "@Component",
        "@Bean",
        "@Import",
        "@Qualifier"
      ],
      "answer": "@Component",
      "difficulty": "easy"
    },
    {
      "id": 9,
      "question": "Which interface provides event-publishing capabilities in Spring?",
      "options": [
        "ApplicationEventPublisher",
        "BeanFactory",
        "Environment",
        "ContextRefreshedEvent"
      ],
      "answer": "ApplicationEventPublisher",
      "difficulty": "hard"
    },
    {
      "id": 10,
      "question": "Which method of the ApplicationContext is used to get a bean by type?",
      "options": [
        "getBean(Class&lt;T&gt; requiredType)",
        "findBean(Class&lt;T&gt; requiredType)",
        "resolve(Class&lt;T&gt; requiredType)",
        "create(Class&lt;T&gt; requiredType)"
      ],
      "answer": "getBean(Class&lt;T&gt; requiredType)",
      "difficulty": "moderate"
    },
    {
      "id": 11,
      "question": "Which Spring module handles separation of cross-cutting concerns?",
      "options": [
        "AOP",
        "Core Container",
        "MVC",
        "Beans"
      ],
      "answer": "AOP",
      "difficulty": "moderate"
    },
    {
      "id": 12,
      "question": "What does `@PostConstruct` ensure in a Spring bean?",
      "options": [
        "Method is executed after dependency injection completes.",
        "Bean is lazily initialized.",
        "Bean is never cached.",
        "Bean is destroyed immediately."
      ],
      "answer": "Method is executed after dependency injection completes.",
      "difficulty": "moderate"
    },
    {
      "id": 13,
      "question": "Which of the following is true about `@Lazy` annotation in Spring?",
      "options": [
        "It marks a bean to be lazily initialized.",
        "It removes the bean from context.",
        "It executes the bean on a separate thread.",
        "It delays all beans in the application context."
      ],
      "answer": "It marks a bean to be lazily initialized.",
      "difficulty": "moderate"
    },
    {
      "id": 14,
      "question": "Which annotation allows you to catch and handle exceptions globally in a Spring MVC app?",
      "options": [
        "@ControllerAdvice",
        "@ExceptionHandler",
        "@RestController",
        "@ErrorHandler"
      ],
      "answer": "@ControllerAdvice",
      "difficulty": "moderate"
    },
    {
      "id": 15,
      "question": "How can Spring handle circular dependencies?",
      "options": [
        "Using setter injection instead of constructor injection.",
        "Using `@Lazy` on both beans.",
        "It doesn't allow circular dependencies.",
        "Only with XML configuration."
      ],
      "answer": "Using setter injection instead of constructor injection.",
      "difficulty": "hard"
    },
    {
      "id": 16,
      "question": "What is the role of `Environment` interface in Spring?",
      "options": [
        "Access properties and profiles from the environment.",
        "Control system-level resources.",
        "Configure servlet context.",
        "Manage logging levels."
      ],
      "answer": "Access properties and profiles from the environment.",
      "difficulty": "moderate"
    },
    {
      "id": 17,
      "question": "What does the `@Scope(\"prototype\")` annotation mean?",
      "options": [
        "A new bean is created each time it is requested.",
        "The bean is loaded at startup.",
        "The bean is shared across all sessions.",
        "The bean is persisted to disk."
      ],
      "answer": "A new bean is created each time it is requested.",
      "difficulty": "easy"
    },
    {
      "id": 18,
      "question": "Which lifecycle callback method is defined in `DisposableBean`?",
      "options": [
        "destroy()",
        "close()",
        "shutdown()",
        "terminate()"
      ],
      "answer": "destroy()",
      "difficulty": "moderate"
    },
    {
      "id": 19,
      "question": "Which interface must be implemented to listen to Spring context events?",
      "options": [
        "ApplicationListener",
        "EventListener",
        "ContextSubscriber",
        "EventConsumer"
      ],
      "answer": "ApplicationListener",
      "difficulty": "hard"
    },
    {
      "id": 20,
      "question": "Which method in `BeanPostProcessor` allows custom logic before initialization?",
      "options": [
        "postProcessBeforeInitialization()",
        "beforeInit()",
        "preProcess()",
        "initializeBean()"
      ],
      "answer": "postProcessBeforeInitialization()",
      "difficulty": "hard"
    },
    {
      "id": 21,
      "question": "How do you define conditional beans in Spring?",
      "options": [
        "Using `@Conditional` annotation",
        "Using `@Scope(\"conditional\")`",
        "Using `@DependsOn`",
        "Using `@OptionalBean`"
      ],
      "answer": "Using `@Conditional` annotation",
      "difficulty": "hard"
    },
    {
      "id": 22,
      "question": "What is the use of `@ImportResource` in Spring?",
      "options": [
        "To import XML-based Spring bean configurations.",
        "To import Java configuration files.",
        "To include YAML properties.",
        "To load CSS resources."
      ],
      "answer": "To import XML-based Spring bean configurations.",
      "difficulty": "moderate"
    },
    {
      "id": 23,
      "question": "Which annotation enables transaction management in Spring?",
      "options": [
        "@EnableTransactionManagement",
        "@EnableTransactional",
        "@TransactionalManager",
        "@AutoTransaction"
      ],
      "answer": "@EnableTransactionManagement",
      "difficulty": "moderate"
    },
    {
      "id": 24,
      "question": "How does Spring handle bean overriding in XML configuration?",
      "options": [
        "The latest bean definition with the same id overrides the previous one.",
        "Spring does not allow bean overriding.",
        "Beans are merged into one.",
        "Spring throws an exception."
      ],
      "answer": "The latest bean definition with the same id overrides the previous one.",
      "difficulty": "moderate"
    },
    {
      "id": 25,
      "question": "Which annotation defines a Spring-managed configuration class?",
      "options": [
        "@Configuration",
        "@Component",
        "@EnableConfig",
        "@Config"
      ],
      "answer": "@Configuration",
      "difficulty": "easy"
    },
    {
      "id": 26,
      "question": "What is the use of `FactoryBean` interface in Spring?",
      "options": [
        "To create complex beans with custom logic.",
        "To replace singleton scope.",
        "To handle circular dependencies.",
        "To inject default values."
      ],
      "answer": "To create complex beans with custom logic.",
      "difficulty": "hard"
    },
    {
      "id": 27,
      "question": "What happens if you define a bean as both `@Component` and `@Service`?",
      "options": [
        "It is still registered as a single bean.",
        "Two beans are created.",
        "Spring will throw an error.",
        "It registers in both containers."
      ],
      "answer": "It is still registered as a single bean.",
      "difficulty": "hard"
    },
    {
      "id": 28,
      "question": "Which annotation helps to inject values from properties file into Spring beans?",
      "options": [
        "@Value",
        "@Inject",
        "@Autowired",
        "@BindValue"
      ],
      "answer": "@Value",
      "difficulty": "easy"
    },
    {
      "id": 29,
      "question": "What does the `refresh()` method of `ConfigurableApplicationContext` do?",
      "options": [
        "Reinitializes the context and its beans.",
        "Clears all beans.",
        "Shuts down the context.",
        "Pauses bean execution."
      ],
      "answer": "Reinitializes the context and its beans.",
      "difficulty": "hard"
    },
    {
      "id": 30,
      "question": "Which Spring annotation combines @ResponseBody and @Controller?",
      "options": [
        "@RestController",
        "@ResponseController",
        "@WebController",
        "@AutoController"
      ],
      "answer": "@RestController",
      "difficulty": "easy"
    }
  ]
}
