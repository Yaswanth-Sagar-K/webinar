{
  "testName": "C++",
  "duration": "30 mins",
  "numberOfQuestions": 30,
  "topicsCovered": [
    "C++"
  ],
  "questions": [
    {
      "id": 1,
      "question": "What is the output of:\n\n```int x = 5, y = 10;\nint z = x++ + ++y;\nstd::cout << z;\n```",
      "options": [
        "15",
        "16",
        "14",
        "Undefined"
      ],
      "answer": "16"
    },
    {
      "id": 2,
      "question": "In C++, what is the type of `'A'` when used in `sizeof('A')`?",
      "options": [
        "char",
        "int",
        "const char",
        "char16_t"
      ],
      "answer": "int"
    },
    {
      "id": 3,
      "question": "Which cast should you use for safe runtime-checked downcasting?",
      "options": [
        "static_cast",
        "reinterpret_cast",
        "dynamic_cast",
        "C-style cast"
      ],
      "answer": "dynamic_cast"
    },
    {
      "id": 4,
      "question": "What is the correct prototype to define a template function taking a type T?",
      "options": [
        "template &lt;class T&gt; void f(T);",
        "template &lt;T&gt; void f(T);",
        "template void f &lt;T&gt;(T);",
        "void f &lt;T&gt;(template);"
      ],
      "answer": "template &lt;class T&gt; void f(T);"
    },
    {
      "id": 5,
      "question": "Which container invalidates pointers on insertions at the beginning?",
      "options": [
        "std::list",
        "std::deque",
        "std::vector",
        "std::forward_list"
      ],
      "answer": "std::vector"
    },
    {
      "id": 6,
      "question": "Which statement about virtual destructors is true?",
      "options": [
        "Not needed for polymorphism",
        "Ensures derived class cleanup",
        "Slows down runtime",
        "Only used in abstract classes"
      ],
      "answer": "Ensures derived class cleanup"
    },
    {
      "id": 7,
      "question": "Given `std::unique_ptr&lt;int&gt; p(new int(5)); auto q = p;`, what happens?",
      "options": [
        "Copies ownership",
        "Compiler error",
        "Runtime error at delete",
        "Undefined behavior"
      ],
      "answer": "Compiler error"
    },
    {
      "id": 8,
      "question": "Which best describes the Rule of Three/Five?",
      "options": [
        "If one special function defined, define others",
        "Templates require five overloads",
        "Only for POD types",
        "Only for exceptions"
      ],
      "answer": "If one special function defined, define others"
    },
    {
      "id": 9,
      "question": "What does `constexpr int f() { return rand(); }` result in C++17?",
      "options": [
        "Compile-time failure",
        "Valid, runtime only",
        "Undefined behavior",
        "Ignored constexpr"
      ],
      "answer": "Compile-time failure"
    },
    {
      "id": 10,
      "question": "What does `static_assert(sizeof(void*) == 8);` do if true?",
      "options": [
        "Compiles successfully",
        "Throws at runtime",
        "Generates linker error",
        "Is ignored"
      ],
      "answer": "Compiles successfully"
    },
    {
      "id": 11,
      "question": "Which best describes `decltype((x))` if x is `int`?",
      "options": [
        "int&",
        "int",
        "int&&",
        "const int"
      ],
      "answer": "int&"
    },
    {
      "id": 12,
      "question": "What is the effect of applying `noexcept` to a function?",
      "options": [
        "Prevents exceptions",
        "Marks function as non-throwing",
        "Catches all exceptions",
        "Optimizes inlining"
      ],
      "answer": "Marks function as non-throwing"
    },
    {
      "id": 13,
      "question": "Which overload is chosen for call `f(nullptr)`?",
      "options": [
        "f(char*)",
        "f(int)",
        "f(void*)",
        "f(std::nullptr_t)"
      ],
      "answer": "f(std::nullptr_t)"
    },
    {
      "id": 14,
      "question": "What does `[[nodiscard]] int f();` indicate?",
      "options": [
        "Warn if return ignored",
        "Ignore return value",
        "Deprecated attribute",
        "No side effects"
      ],
      "answer": "Warn if return ignored"
    },
    {
      "id": 15,
      "question": "Which approach avoids unnecessary copies in moves?",
      "options": [
        "shallow copy",
        "deep copy",
        "move semantics",
        "copy constructor"
      ],
      "answer": "move semantics"
    },
    {
      "id": 16,
      "question": "When is function-static variable initialization thread-safe?",
      "options": [
        "C++98",
        "C++11 and later",
        "C++03",
        "Never"
      ],
      "answer": "C++11 and later"
    },
    {
      "id": 17,
      "question": "Which smart pointer supports a custom deleter?",
      "options": [
        "std::shared_ptr&lt;T&gt;",
        "std::unique_ptr&lt;T, D&gt;",
        "std::auto_ptr",
        "std::weak_ptr"
      ],
      "answer": "std::unique_ptr&lt;T, D&gt;"
    },
    {
      "id": 18,
      "question": "Which statement about `auto &rd = d;` for a double d is true?",
      "options": [
        "Creates a copy",
        "Binds as lvalue reference",
        "Const reference",
        "Compiler error"
      ],
      "answer": "Binds as lvalue reference"
    },
    {
      "id": 19,
      "question": "What is the value category of `42`?",
      "options": [
        "lvalue",
        "prvalue",
        "xvalue",
        "glvalue"
      ],
      "answer": "prvalue"
    },
    {
      "id": 20,
      "question": "In class inheritance, the diamond problem is resolved by?",
      "options": [
        "virtual inheritance",
        "override keyword",
        "friend classes",
        "namespaces"
      ],
      "answer": "virtual inheritance"
    },
    {
      "id": 21,
      "question": "Which line below has undefined behavior?\n```int a = 2;\nint b = a++ * ++a;\n```",
      "options": [
        "a=2",
        "a++",
        "a++ * ++a",
        "None"
      ],
      "answer": "a++ * ++a"
    },
    {
      "id": 22,
      "question": "Which mechanism avoids run-time checking at compile time?",
      "options": [
        "constexpr",
        "dynamic_cast",
        "RTTI",
        "virtual functions"
      ],
      "answer": "constexpr"
    },
    {
      "id": 23,
      "question": "What type deduction occurs with structured binding `auto [a, b] = std::make_pair(1, 2);`?",
      "options": [
        "Copies by value",
        "References",
        "Pointer to pair",
        "Undefined"
      ],
      "answer": "Copies by value"
    },
    {
      "id": 24,
      "question": "Which cast allows conversion between unrelated pointer types?",
      "options": [
        "static_cast",
        "dynamic_cast",
        "reinterpret_cast",
        "const_cast"
      ],
      "answer": "reinterpret_cast"
    },
    {
      "id": 25,
      "question": "What is the return type of `auto f()->int`?",
      "options": [
        "int",
        "deduced",
        "void",
        "depends"
      ],
      "answer": "int"
    },
    {
      "id": 26,
      "question": "Why declare a member function `void f() const;`?",
      "options": [
        "Allow const-object calls",
        "Make it inline",
        "Throws no exceptions",
        "Disable overrides"
      ],
      "answer": "Allow const-object calls"
    },
    {
      "id": 27,
      "question": "What is the size of a C-style string literal pointer?",
      "options": [
        "1 byte",
        "sizeof(char*)",
        "Depends on characters",
        "4 bytes always"
      ],
      "answer": "sizeof(char*)"
    },
    {
      "id": 28,
      "question": "What happens if `delete` is called with a null pointer?",
      "options": [
        "No effect",
        "Crashes",
        "Undefined",
        "Frees global"
      ],
      "answer": "No effect"
    },
    {
      "id": 29,
      "question": "Which statement about `std::vector&lt;int&gt; v{1,2,3}; v[0];` is true?",
      "options": [
        "Performs bounds checking",
        "Undefined if out of range",
        "Always safe",
        "Throws exception on error"
      ],
      "answer": "Undefined if out of range"
    },
    {
      "id": 30,
      "question": "What does `std::string t = s + \"text\";` invoke?",
      "options": [
        "operator+ overload",
        "String literal copy",
        "Concatenation in place",
        "Compile error"
      ],
      "answer": "operator+ overload"
    }
  ]
}